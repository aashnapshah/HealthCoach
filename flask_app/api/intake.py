"""
HealthCoach Intake System
Manages the medical record verification workflow
"""

import sys
import os

# Add model directory to path (now we're in flask_app/api/, need to go up 2 levels)
current_dir = os.path.dirname(os.path.abspath(__file__))
flask_app_dir = os.path.dirname(current_dir)
project_root = os.path.dirname(flask_app_dir)
sys.path.insert(0, os.path.join(project_root, 'model'))

from typing import Dict, Optional, List
from enum import Enum
from question_generator import (
    initialize_question_llm,
    generate_ehr_verification_questions
)

class QuestionType(Enum):
    YES_NO = "yes_no"
    YES_NO_MAYBE = "yes_no_maybe"
    SCALE_1_10 = "scale_1_10"
    TEXT = "text"
    MULTIPLE_CHOICE = "multiple_choice"

class IntakeStage(Enum):
    VERIFICATION = "verification"        # Verify medical record
    SUMMARY = "summary"                  # Generate summary
    COMPLETE = "complete"                # Intake completed

class IntakeSession:
    """Manages a patient's intake verification session"""
    
    def __init__(self, patient_id: str, patient_data: dict):
        self.patient_id = patient_id
        self.patient_data = patient_data
        self.stage = IntakeStage.VERIFICATION
        self.responses: Dict[str, str] = {}
        
        # Question management
        self.questions: List[Dict] = []
        self.current_index = 0
        
        # Initialize LLM
        try:
            self.llm = initialize_question_llm()
            self.llm_available = True
        except Exception as e:
            print(f"Warning: LLM initialization failed: {e}")
            self.llm_available = False
            self.llm = None

    def get_verification_questions(self) -> List[Dict]:
        """Get EHR verification questions"""
        if not self.questions:
            try:
                if self.llm_available:
                    questions = generate_ehr_verification_questions(self.patient_data, self.llm)
                    if questions:
                        self.questions = questions
                        return questions
            except Exception as e:
                print(f"Error generating verification questions: {e}")
            
            # Fallback questions if LLM fails
            self.questions = [
                {
                    "question": "Please confirm that your medical record information is still accurate.",
                    "type": "yes_no",
                    "context": "This helps us ensure your treatment plan is current",
                    "key": "verify_record"
                },
                {
                    "question": "Are all your current medications listed correctly in your record?",
                    "type": "yes_no",
                    "context": "Medication accuracy is crucial for your care",
                    "key": "verify_medications"
                }
            ]
        return self.questions

def get_next_question(session: IntakeSession) -> Optional[Dict]:
    """Get the next question in the verification flow"""
    
    if session.stage == IntakeStage.VERIFICATION:
        questions = session.get_verification_questions()
        
        if session.current_index < len(questions):
            question = questions[session.current_index]
            session.current_index += 1
            return {
                **question,
                "section": "verification"
            }
        else:
            # Move to summary
            session.stage = IntakeStage.SUMMARY
            return {
                "type": "info",
                "question": "Thank you! I'll prepare a summary of the changes needed...",
                "key": "generating_summary"
            }
    
    return None

def generate_verification_summary(session: IntakeSession) -> str:
    """Generate a summary of medical record changes needed"""
    try:
        # Format responses with context
        responses = "\n".join([
            f"• {q['question']}\n  → {session.responses.get(q['key'], 'No response')}"
            for q in session.questions
            if q['key'] in session.responses
        ])
        
        return f"""MEDICAL RECORD VERIFICATION SUMMARY
        
Patient: {session.patient_data['name']} (ID: {session.patient_id})
Age: {session.patient_data['age']} | Gender: {session.patient_data['gender']}

VERIFICATION RESPONSES:
{responses}

Please review and update the medical record based on these responses.
Generated by HealthCoach"""
        
    except Exception as e:
        print(f"Error generating summary: {e}")
        
        # Fallback to basic summary
        all_responses = "\n".join([
            f"Q: {key}\nA: {value}"
            for key, value in session.responses.items()
        ])
        
        return f"""MEDICAL RECORD VERIFICATION SUMMARY

Patient: {session.patient_data['name']} (ID: {session.patient_id})
Age: {session.patient_data['age']} | Gender: {session.patient_data['gender']}

RESPONSES:
{all_responses}

Generated by HealthCoach"""